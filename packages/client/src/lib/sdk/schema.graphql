type PaginatedMetaType {
  curPage: Float!
  perPage: Float!
  total: Float!
}

type MethodsType {
  id: ID!
  name: String!
  group: String!
  editable: Boolean!
  description: String!
  allowed: Boolean!
}

type RoleType {
  id: ID!
  name: String!
  editable: Boolean!
  superuser: Boolean!
  methods: [MethodsType!]!
}

type PaginatedRoles {
  data: [RoleType!]!
  meta: PaginatedMetaType!
}

type UserType {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  status: AuthUserStatusEnum!
  createdAt: DateTime!
  deletedAt: DateTime
}

enum AuthUserStatusEnum {
  WAITING_COMPLETE
  ACTIVE
  BLOCKED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedUsers {
  data: [UserType!]!
  meta: PaginatedMetaType!
}

type AuthorizationResponse {
  refreshToken: String!
  accessToken: String!
  userId: ID!
  expiresAt: Float!
}

type GetNotificationPreferences {
  emailEnabled: Boolean!
  email: String
  webEnabled: Boolean!
  telegramEnabled: Boolean!
  telegramAccount: Float
}

type Query {
  getUsers(input: GetUsersInput!): PaginatedUsers!
  getRoles(input: GetRolesInput!): PaginatedRoles!
  getMyRole: RoleType!
  getUser(input: GetUserInput!): UserType!
  getMyNotificationPreferences: GetNotificationPreferences!
}

input GetUsersInput {
  curPage: Float
  perPage: Float
  orderBy: OrderByInput
  filter: GetUsersFilterInput
}

input OrderByInput {
  field: String!
  order: OrderEnum!
}

enum OrderEnum {
  ASC
  DESC
}

input GetUsersFilterInput {
  email: String
  firstname: String
  lastname: String
  role: String
  status: AuthUserStatusEnum
}

input GetRolesInput {
  curPage: Float
  perPage: Float
  filter: GetRolesFilterInput
}

input GetRolesFilterInput {
  name: String
}

input GetUserInput {
  userId: ID!
}

type Mutation {
  updateRole(input: UpdateRoleInput!): Boolean!
  changeUserRole(input: ChangeUserRoleInput!): Boolean!
  createRole(input: CreateRoleInput!): Boolean!
  deleteRole(input: DeleteRoleInput!): Boolean!
  changePermissions(input: ChangePermissionsInput!): Boolean!
  updateUser(input: UpdateUserInput!): Boolean!
  signIn(input: SignInInput!): AuthorizationResponse!
  refreshToken(input: RefreshTokenInput!): AuthorizationResponse!
  createUser(input: CreateUserInput!): UserType!
  deleteUser(input: DeleteUserInput!): Boolean!
  completeSignIn(input: CompleteSignInInput!): AuthorizationResponse!
  changeMyNotificationPreferences(
    input: ChangeMyNotificationPreferences!
  ): Boolean!
}

input UpdateRoleInput {
  roleId: ID!
  name: String
  superuser: Boolean
  editable: Boolean
}

input ChangeUserRoleInput {
  userId: ID!
  roleName: String!
}

input CreateRoleInput {
  name: String!
}

input DeleteRoleInput {
  roleId: ID!
}

input ChangePermissionsInput {
  roleId: ID!
  permissions: [PermissionInput!]!
}

input PermissionInput {
  methodId: ID!
  allow: Boolean!
}

input UpdateUserInput {
  userId: ID!
  email: String
  firstname: String
  lastname: String
  password: String
  role: String
  status: AuthUserStatusEnum
}

input SignInInput {
  email: String!
  password: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  roleName: String!
}

input DeleteUserInput {
  userId: ID!
}

input CompleteSignInInput {
  userId: ID!
  code: String!
  password: String!
}

input ChangeMyNotificationPreferences {
  emailEnabled: Boolean
  email: String
  webEnabled: Boolean
  telegramEnabled: Boolean
  telegramAccount: Float
}
