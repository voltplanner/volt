generator client {
    provider        = "prisma-client-js"
    output          = "../../../../node_modules/generatedprisma"
    binaryTargets   = ["native", "linux-musl", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
    previewFeatures = ["multiSchema", "fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = ["auth", "notifications", "files", "tasks"]
}

model AuthUser {
    id           String  @id @default(uuid()) @db.Uuid
    email        String  @unique
    firstname    String
    lastname     String
    password     String?
    completeCode String?

    role   AuthRole @relation(fields: [roleId], references: [id])
    roleId String   @db.Uuid

    status    AuthUserStatusEnum @default(WAITING_COMPLETE)
    createdAt DateTime           @default(now())
    deletedAt DateTime?
    tokens    AuthRefreshToken[]

    @@schema("auth")
}

model AuthRefreshToken {
    id        String   @id @default(uuid()) @db.Uuid
    isRevoked Boolean  @default(false)
    expiresAt DateTime
    user      AuthUser @relation(fields: [userId], references: [id])
    userId    String @db.Uuid

    @@schema("auth")
}

model AuthRole {
    id          String               @id @default(uuid()) @db.Uuid
    name        String               @unique
    superuser   Boolean
    editable    Boolean
    user        AuthUser[]
    permissions AuthRolePermission[]

    @@schema("auth")
}

model AuthRolePermission {
    role     AuthRole   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    roleId   String @db.Uuid
    method   AuthMethod @relation(fields: [methodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    methodId String @db.Uuid
    allowed  Boolean
    editable Boolean    @default(true)

    @@id([roleId, methodId])
    @@schema("auth")
}

model AuthMethod {
    id          String @id @default(uuid()) @db.Uuid
    name        String @unique
    description String
    group       String

    permissions AuthRolePermission[]

    @@schema("auth")
}

enum AuthUserStatusEnum {
    WAITING_COMPLETE
    ACTIVE
    BLOCKED

    @@schema("auth")
}

model AuthSettings {
    id                      Int     @id
    defaultRolesInitialized Boolean @default(false)

    @@schema("auth")
}

model NotificationPreferences {
    id              String         @id @default(uuid()) @db.Uuid
    externalUserId  String         @unique @db.Uuid
    emailEnabled    Boolean
    email           String?
    webEnabled      Boolean
    telegramEnabled Boolean
    telegramAccount Int?
    nofications     Notification[]

    @@schema("notifications")
}

model Notification {
    id            String                   @id @default(uuid()) @db.Uuid
    topic         String
    message       String
    link          String?
    type          NotificationTypeEnum
    sent          Boolean                  @default(false)
    sentAt        DateTime?
    error         String?
    Preferences   NotificationPreferences? @relation(fields: [preferencesId], references: [id])
    preferencesId String? @db.Uuid

    @@schema("notifications")
}

enum NotificationTypeEnum {
    EMAIL
    WEB
    TELEGRAM

    @@schema("notifications")
}

model File {
    id           String @id @default(uuid()) @db.Uuid
    originalName String
    mimeType     String
    size         Int
    eTag         String
    bucket       String
    key          String
    location     String
    userId       String @db.Uuid

    @@schema("files")
}

model TaskUser {
    id     String @id @default(uuid()) @db.Uuid
    roleId String @map("role_id") @db.Uuid

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

    projects        TaskProjectOnUser[]
    tasksAssignedTo Task[]              @relation("FK__TASK__ASSIGNED_TO")
    attachments     TaskAttachment[]
    changes         TaskChange[]
    comments        TaskComment[]
    efforts         TaskEffort[]
    role            TaskUserRole        @relation(fields: [roleId], references: [id], map: "FK__USER__ROLE")

    @@map("task_user")
    @@schema("tasks")
}

model TaskUserRole {
    id          String  @id @default(uuid()) @db.Uuid
    code        String  @unique @db.VarChar(36)
    name        String  @db.VarChar(64)
    position    Int     @db.SmallInt
    description String?

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    projectId String      @map("project_id") @db.Uuid
    project   TaskProject @relation(fields: [projectId], references: [id], map: "FK__TASK_USER_ROLE__PROJECT")

    users       TaskUser[]

    @@unique([code, isDeleted])
    @@map("task_user_role")
    @@schema("tasks")
}

model TaskProject {
    id                   String                @id @default(uuid()) @db.Uuid
    name                 String                @db.VarChar(512)
    description          String?
    deadline             DateTime?             @db.Timestamp(6)
    budget               Int?                  @db.Integer
    version              Int                   @db.Integer
    createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt            DateTime              @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt            DateTime?             @map("deleted_at") @db.Timestamp(6)
    isDeleted            Boolean               @default(false) @map("is_deleted")
    users                TaskProjectOnUser[]
    tasks                Task[]
    tasksCustomFields    TaskCustomFieldType[]
    tasksConnectionTypes TaskRelation[]
    tasksStatuses        TaskStatus[]
    tasksTags            TaskTag[]
    tasksUserRoles       TaskUserRole[]

    @@map("task_project")
    @@schema("tasks")
}

model TaskProjectOnUser {
    projectId String      @map("project_id") @db.Uuid
    userId    String      @map("user_id") @db.Uuid
    project   TaskProject @relation(fields: [projectId], references: [id], map: "FK__PROJECT_ON_USER__PROJECT")
    user      TaskUser    @relation(fields: [userId], references: [id], map: "FK__PROJECT_ON_USER__USER")

    @@id([projectId, userId], map: "PK__PROJECT_ON_USER")
    @@map("task_project_on_user")
    @@schema("tasks")
}

model Task {
    id                 String    @id @default(uuid()) @db.Uuid
    name               String    @db.VarChar(512)
    number             Int       @default(autoincrement()) @db.Integer
    createdById        String    @map("created_by_id") @db.Uuid
    description        String?
    version            Int       @db.Integer
    estimatedDateStart DateTime? @map("estimated_date_start") @db.Timestamp(6)
    estimatedDateEnd   DateTime? @map("estimated_date_end") @db.Timestamp(6)
    estimatedDuration  BigInt?   @map("estimated_duration")

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    projectId    String      @map("project_id") @db.Uuid
    project      TaskProject @relation(fields: [projectId], references: [id], map: "FK__TASK__PROJECT")
    statusId     String      @map("status_id") @db.Uuid
    status       TaskStatus  @relation(fields: [statusId], references: [id], map: "FK__TASK__STATUS")
    assignedToId String?     @map("assigned_to_id") @db.Uuid
    assignedTo   TaskUser?   @relation("FK__TASK__ASSIGNED_TO", fields: [assignedToId], references: [id], map: "FK__TASK__ASSIGNED_TO")
    parentId     String?     @map("parent_id") @db.Uuid
    parent       Task?       @relation("FK__TASK__PARENT", fields: [parentId], references: [id])

    children         Task[]               @relation("FK__TASK__PARENT")
    connectedForeign TaskOnTaskRelation[] @relation("FK__TASK_RELATION__TASK_FOREIGN")
    connectedMain    TaskOnTaskRelation[] @relation("FK__TASK_RELATION__TASK_MAIN")

    lft          Int
    rgt          Int
    level        Int
    changes      TaskChange[]
    efforts      TaskEffort[]
    comments     TaskComment[]
    tags         TaskOnTaskTag[]
    attachments  TaskAttachment[]
    customFields TaskCustomField[]

    @@map("task")
    @@schema("tasks")
}

model TaskStatus {
    id          String  @id @default(uuid()) @db.Uuid
    code        String  @unique @db.VarChar(36)
    name        String  @db.VarChar(64)
    position    Int     @db.SmallInt
    description String?
    isDefault   Boolean @default(false) @map("is_default")

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    projectId String      @map("project_id") @db.Uuid
    project   TaskProject @relation(fields: [projectId], references: [id], map: "FK__TASK_STATUS__PROJECT")

    tasks Task[]

    @@unique([code, isDeleted])
    @@unique([position, isDeleted])
    @@map("task_status")
    @@schema("tasks")
}

model TaskEffort {
    id          String @id @default(uuid()) @db.Uuid
    value       Int
    description String

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    taskId String   @map("task_id") @db.Uuid
    task   Task     @relation(fields: [taskId], references: [id], map: "FK__TASK_EFFORT__TASK")
    userId String   @map("user_id") @db.Uuid
    user   TaskUser @relation(fields: [userId], references: [id], map: "FK__TASK_EFFORT__USER")

    @@map("task_effort")
    @@schema("tasks")
}

model TaskTag {
    id          String  @id @default(uuid()) @db.Uuid
    code        String  @unique @db.VarChar(36)
    name        String  @db.VarChar(64)
    position    Int     @db.SmallInt
    description String?

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    projectId String      @map("project_id") @db.Uuid
    project   TaskProject @relation(fields: [projectId], references: [id], map: "FK__TASK_TAG__PROJECT")

    tasks TaskOnTaskTag[]

    @@unique([code, isDeleted])
    @@unique([position, isDeleted])
    @@map("task_tag")
    @@schema("tasks")
}

model TaskOnTaskTag {
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    taskId    String  @map("task_id") @db.Uuid
    task      Task    @relation(fields: [taskId], references: [id], onDelete: NoAction, map: "FK__TASK_ON_TASK_TAG__TASK")
    taskTagId String  @map("task_tag_id") @db.Uuid
    taskTag   TaskTag @relation(fields: [taskTagId], references: [id], onDelete: NoAction, map: "FK__TASK_ON_TASK_TAG__TASK_TAG")

    @@id([taskId, taskTagId], map: "PK__TASK_ON_TASK_TAG")
    @@map("task_on_task_tag")
    @@schema("tasks")
}

model TaskAttachment {
    id          String  @id @default(uuid()) @db.Uuid
    name        String  @db.VarChar(512)
    description String?
    sizeKb      Int     @map("size_kb")
    externalId  String

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    taskId String   @map("task_id") @db.Uuid
    task   Task     @relation(fields: [taskId], references: [id], map: "FK__TASK_ATTACHMENT__TASK")
    userId String   @map("user_id") @db.Uuid
    user   TaskUser @relation(fields: [userId], references: [id], map: "FK__TASK_ATTACHMENT__USER")

    @@map("task_attachment")
    @@schema("tasks")
}

model TaskComment {
    id   String @id @default(uuid()) @db.Uuid
    text String

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    taskId String   @map("task_id") @db.Uuid
    task   Task     @relation(fields: [taskId], references: [id], map: "FK__TASK_COMMENT__TASK")
    userId String   @map("user_id") @db.Uuid
    user   TaskUser @relation(fields: [userId], references: [id], map: "FK__TASK_COMMENT__USER")

    @@map("task_comment")
    @@schema("tasks")
}

model TaskChange {
    id           String  @id @default(uuid()) @db.Uuid
    propertyName String  @map("property_name") @db.VarChar(64)
    valueNew     String? @map("value_new")
    valueOld     String? @map("value_old")

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    taskId String   @map("task_id") @db.Uuid
    task   Task     @relation(fields: [taskId], references: [id], map: "FK__TASK_CHANGE__TASK")
    userId String   @map("user_id") @db.Uuid
    user   TaskUser @relation(fields: [userId], references: [id], map: "FK__TASK_CHANGE__USER")

    @@map("task_change")
    @@schema("tasks")
}

model TaskOnTaskRelation {
    taskMainId    String @map("task_main_id") @db.Uuid
    taskForeignId String @map("task_foreign_id") @db.Uuid

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    taskRelationId String       @map("task_relation_id") @db.Uuid
    taskRelation   TaskRelation @relation(fields: [taskRelationId], references: [id], map: "FK__TASK_RELATION__TASK_RELATION_TYPE")
    taskForeign    Task         @relation("FK__TASK_RELATION__TASK_FOREIGN", fields: [taskForeignId], references: [id])
    taskMain       Task         @relation("FK__TASK_RELATION__TASK_MAIN", fields: [taskMainId], references: [id])

    @@id([taskMainId, taskForeignId], map: "PK__TASK_RELATION")
    @@map("task_on_task_relation")
    @@schema("tasks")
}

model TaskRelation {
    id          String  @id @default(uuid()) @db.Uuid
    code        String  @unique @db.VarChar(36)
    nameMain    String  @map("name_main") @db.VarChar(64)
    nameForeign String  @map("name_foreign") @db.VarChar(64)
    position    Int     @db.SmallInt
    description String?

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    projectId String      @map("project_id") @db.Uuid
    project   TaskProject @relation(fields: [projectId], references: [id], map: "FK__TASK_RELATION_TYPE__PROJECT")

    tasks TaskOnTaskRelation[]

    @@unique([code, isDeleted])
    @@unique([position, isDeleted])
    @@map("task_relation")
    @@schema("tasks")
}

model TaskCustomField {
    id    String  @id @default(uuid()) @db.Uuid
    value String?

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    taskCustomFieldTypeId String              @map("task_custom_field_type_id") @db.Uuid
    taskCustomFieldType   TaskCustomFieldType @relation(fields: [taskCustomFieldTypeId], references: [id], map: "FK__TASK_CUSTOM_FIELD__TASK_CUSTOM_FIELD_TYPE")
    taskId                String              @map("task_type_id") @db.Uuid
    task                  Task                @relation(fields: [taskId], references: [id], map: "FK__TASK_CUSTOM_FIELD__TASK")

    @@map("task_custom_field")
    @@schema("tasks")
}

model TaskCustomFieldType {
    id             String   @id @default(uuid()) @db.Uuid
    code           String   @unique @db.VarChar(36)
    name           String   @db.VarChar(64)
    position       Int      @db.SmallInt
    isEditable     Boolean  @default(true) @map("is_editable")
    isRequired     Boolean? @default(false) @map("is_required")
    isSearchable   Boolean? @default(false) @map("is_searchable")
    isFilterable   Boolean? @default(false) @map("is_filterable")
    possibleValues String?  @map("possible_values")
    defaultValue   String?  @map("default_value")
    regexp         String?

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    valueTypeId String                   @map("value_type_id") @db.Uuid
    valueType   TaskCustomFieldValueType @relation(fields: [valueTypeId], references: [id], map: "FK__TASK_CUSTOM_FIELD_TYPE__VALUE_TYPE")
    projectId   String                   @map("project_id") @db.Uuid
    project     TaskProject              @relation(fields: [projectId], references: [id], map: "FK__TASK_CUSTOM_FIELD_TYPE__PROJECT")

    tasksCustomFields TaskCustomField[]

    @@unique([code, isDeleted])
    @@unique([position, isDeleted])
    @@map("task_custom_field_type")
    @@schema("tasks")
}

model TaskCustomFieldValueType {
    id       String @id @default(uuid()) @db.Uuid
    code     String @unique @db.VarChar(36)
    name     String @db.VarChar(64)
    position Int    @db.SmallInt

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    tasksCustomFieldsTypes TaskCustomFieldType[]

    @@unique([code, isDeleted])
    @@unique([position, isDeleted])
    @@map("task_custom_field_value_type")
    @@schema("tasks")
}
