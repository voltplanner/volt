generator client {
    provider        = "prisma-client-js"
    output          = "../../../../node_modules/generatedprisma"
    binaryTargets   = ["native", "linux-musl", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model AuthUser {
    id           String  @id @default(uuid()) @db.Uuid
    email        String  @unique
    firstname    String
    lastname     String
    password     String?
    completeCode String?

    role   AuthRole @relation(fields: [roleId], references: [id])
    roleId String   @db.Uuid

    status    AuthUserStatusEnum @default(WAITING_COMPLETE)
    createdAt DateTime           @default(now())
    deletedAt DateTime?
    tokens    AuthRefreshToken[]

    @@map("auth_user")
}

model AuthRefreshToken {
    id        String   @id @default(uuid()) @db.Uuid
    isRevoked Boolean  @default(false) @map("is_revoked")
    expiresAt DateTime @map("expires_at") @db.Timestamp(6)
    userId    String   @map("user_id") @db.Uuid
    user      AuthUser @relation(fields: [userId], references: [id], map: "FK__AUTH_REFRESH_TOKEN__USER")

    @@map("auth_refresh_token")
}

model AuthRole {
    id          String               @id @default(uuid()) @db.Uuid
    name        String               @unique @db.VarChar(32)
    superuser   Boolean
    editable    Boolean
    permissions AuthRolePermission[]
    user        AuthUser[]

    @@map("auth_role")
}

model AuthRolePermission {
    roleId   String     @map("role_id") @db.Uuid
    methodId String     @map("method_id") @db.Uuid
    allowed  Boolean
    editable Boolean    @default(true)
    method   AuthMethod @relation(fields: [methodId], references: [id], onDelete: Cascade, map: "FK__AUTH_ROLE_PERMISSION__METHOD")
    role     AuthRole   @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "FK__AUTH_ROLE_PERMISSION__ROLE")

    @@id([roleId, methodId])
    @@map("auth_role_permission")
}

model AuthMethod {
    id          String               @id @default(uuid()) @db.Uuid
    name        String               @unique @db.VarChar(32)
    description String
    group       String               @db.VarChar
    permissions AuthRolePermission[]

    @@map("auth_method")
}

model AuthSettings {
    id                      Int     @id
    defaultRolesInitialized Boolean @default(false)

    @@map("auth_settings")
}

model SystemSettings {
    id String @id @default(uuid()) @db.Uuid

    @@map("system_settings")
}

model NotificationPreferences {
    id              String         @id @default(uuid()) @db.Uuid
    externalUserId  String         @unique @db.Uuid
    emailEnabled    Boolean
    email           String?
    webEnabled      Boolean
    telegramEnabled Boolean
    telegramAccount Int?
    nofications     Notification[]
}

model Notification {
    id            String                   @id @default(uuid()) @db.Uuid
    topic         String
    message       String
    link          String?
    type          NotificationTypeEnum
    sent          Boolean                  @default(false)
    sentAt        DateTime?
    error         String?
    Preferences   NotificationPreferences? @relation(fields: [preferencesId], references: [id])
    preferencesId String?                  @db.Uuid
}

model TaskUser {
    id         String @id @default(uuid()) @db.Uuid
    externalId String @db.Uuid

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")

    projectsCreatedBy TaskProject[]
    projects          TaskProjectOnUser[]
    tasksAssignedTo   Task[]              @relation("FK__TASK__ASSIGNED_TO")
    tasksCreatedBy    Task[]              @relation("FK__TASK__CREATED_BY")
    attachments       TaskAttachment[]
    changes           TaskChange[]
    comments          TaskComment[]
    efforts           TaskEffort[]

    @@unique([externalId, isDeleted])
    @@map("task_user")
}

model TaskProject {
    id                   String                @id @default(uuid()) @db.Uuid
    name                 String                @db.VarChar(512)
    description          String?
    version              Int                   @default(0) @db.Integer
    createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt            DateTime              @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt            DateTime?             @map("deleted_at") @db.Timestamp(6)
    isDeleted            Boolean               @default(false) @map("is_deleted")
    statusId             String                @map("status_id") @db.Uuid
    createdById          String                @map("created_by_id") @db.Uuid
    createdBy            TaskUser              @relation(fields: [createdById], references: [id], map: "FK__PROJECT__CREATED_BY")
    status               TaskProjectStatus     @relation(fields: [statusId], references: [id], map: "FK__PROJECT__STATUS")
    users                TaskProjectOnUser[]
    tasks                Task[]
    tasksCustomFields    TaskCustomFieldType[]
    tasksConnectionTypes TaskRelationType[]
    tasksStatuses        TaskStatus[]
    tasksTags            TaskTag[]
    tasksTypes           TaskType[]

    @@map("task_project")
}

model TaskProjectStatus {
    id          String        @id @default(uuid()) @db.Uuid
    code        String        @unique @db.VarChar(36)
    name        String        @db.VarChar(64)
    position    Int           @db.SmallInt
    description String?
    createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt   DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt   DateTime?     @map("deleted_at") @db.Timestamp(6)
    isDeleted   Boolean       @default(false) @map("is_deleted")
    projects    TaskProject[]

    @@unique([name, isDeleted])
    @@unique([position, isDeleted])
    @@map("task_project_status")
}

model TaskProjectOnUser {
    projectId String      @map("project_id") @db.Uuid
    userId    String      @map("user_id") @db.Uuid
    project   TaskProject @relation(fields: [projectId], references: [id], map: "FK__PROJECT_ON_USER__PROJECT")
    user      TaskUser    @relation(fields: [userId], references: [id], map: "FK__PROJECT_ON_USER__USER")

    @@id([projectId, userId], map: "PK__PROJECT_ON_USER")
    @@map("task_project_on_user")
}

model Task {
    id                 String           @id @default(uuid()) @db.Uuid
    name               String           @db.VarChar(512)
    number             Int              @default(autoincrement()) @db.Integer
    description        String?
    estimatedDateStart DateTime?        @map("estimated_date_start") @db.Timestamp(6)
    estimatedDateEnd   DateTime?        @map("estimated_date_end") @db.Timestamp(6)
    estimatedDuration  BigInt?          @map("estimated_duration")
    createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt          DateTime         @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt          DateTime?        @map("deleted_at") @db.Timestamp(6)
    isDeleted          Boolean          @default(false) @map("is_deleted")
    projectId          String           @map("project_id") @db.Uuid
    typeId             String           @map("type_id") @db.Uuid
    statusId           String           @map("status_id") @db.Uuid
    createdById        String           @map("created_by_id") @db.Uuid
    assignedToId       String?          @map("assigned_to_id") @db.Uuid
    lft                Int
    rgt                Int
    level              Int
    parentId           String?          @map("parent_id") @db.Uuid
    assignedTo         TaskUser?        @relation("FK__TASK__ASSIGNED_TO", fields: [assignedToId], references: [id], map: "FK__TASK__ASSIGNED_TO")
    createdBy          TaskUser         @relation("FK__TASK__CREATED_BY", fields: [createdById], references: [id], map: "FK__TASK__CREATED_BY")
    project            TaskProject      @relation(fields: [projectId], references: [id], map: "FK__TASK__PROJECT")
    status             TaskStatus       @relation(fields: [statusId], references: [id], map: "FK__TASK__STATUS")
    type               TaskType         @relation(fields: [typeId], references: [id], map: "FK__TASK__TYPE")
    parent             Task?            @relation("FK__TASK__PARENT", fields: [parentId], references: [id])
    children           Task[]           @relation("FK__TASK__PARENT")
    attachments        TaskAttachment[]
    changes            TaskChange[]
    comments           TaskComment[]
    efforts            TaskEffort[]
    tags               TaskOnTaskTag[]
    connectedForeign   TaskRelation[]   @relation("FK__TASK_RELATION__TASK_FOREIGN")
    connectedMain      TaskRelation[]   @relation("FK__TASK_RELATION__TASK_MAIN")

    @@map("task")
}

model TaskEffort {
    id          String    @id @default(uuid()) @db.Uuid
    value       BigInt
    description String
    createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt   DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted   Boolean   @default(false) @map("is_deleted")
    taskId      String    @map("task_id") @db.Uuid
    userId      String    @map("user_id") @db.Uuid
    task        Task      @relation(fields: [taskId], references: [id], map: "FK__TASK_EFFORT__TASK")
    user        TaskUser  @relation(fields: [userId], references: [id], map: "FK__TASK_EFFORT__USER")

    @@map("task_effort")
}

model TaskType {
    id                String            @id @default(uuid()) @db.Uuid
    code              String            @unique @db.VarChar(36)
    name              String            @db.VarChar(64)
    position          Int               @db.SmallInt
    description       String?
    createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt         DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt         DateTime?         @map("deleted_at") @db.Timestamp(6)
    isDeleted         Boolean           @default(false) @map("is_deleted")
    projectId         String            @map("project_id") @db.Uuid
    tasks             Task[]
    tasksCustomFields TaskCustomField[]
    project           TaskProject       @relation(fields: [projectId], references: [id], map: "FK__TASK_TYPE__PROJECT")

    @@unique([position, isDeleted])
    @@map("task_type")
}

model TaskStatus {
    id          String      @id @default(uuid()) @db.Uuid
    code        String      @unique @db.VarChar(36)
    name        String      @db.VarChar(64)
    position    Int         @db.SmallInt
    description String?
    createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt   DateTime    @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt   DateTime?   @map("deleted_at") @db.Timestamp(6)
    isDeleted   Boolean     @default(false) @map("is_deleted")
    projectId   String      @map("project_id") @db.Uuid
    tasks       Task[]
    project     TaskProject @relation(fields: [projectId], references: [id], map: "FK__TASK_STATUS__PROJECT")

    @@unique([position, isDeleted])
    @@map("task_status")
}

model TaskTag {
    id          String          @id @default(uuid()) @db.Uuid
    code        String          @unique @db.VarChar(36)
    name        String          @db.VarChar(64)
    position    Int             @db.SmallInt
    description String?
    createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt   DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt   DateTime?       @map("deleted_at") @db.Timestamp(6)
    isDeleted   Boolean         @default(false) @map("is_deleted")
    projectId   String          @map("project_id") @db.Uuid
    tasks       TaskOnTaskTag[]
    project     TaskProject     @relation(fields: [projectId], references: [id], map: "FK__TASK_TAG__PROJECT")

    @@unique([position, isDeleted])
    @@map("task_tag")
}

model TaskOnTaskTag {
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")
    taskId    String    @map("task_id") @db.Uuid
    taskTagId String    @map("task_tag_id") @db.Uuid
    task      Task      @relation(fields: [taskId], references: [id], onDelete: NoAction, map: "FK__TASK_ON_TASK_TAG__TASK")
    taskTag   TaskTag   @relation(fields: [taskTagId], references: [id], onDelete: NoAction, map: "FK__TASK_ON_TASK_TAG__TASK_TAG")

    @@id([taskId, taskTagId], map: "PK__TASK_ON_TASK_TAG")
    @@map("task_on_task_tag")
}

model TaskAttachment {
    id        String    @id @default(uuid()) @db.Uuid
    name      String    @db.VarChar(512)
    sizeKb    Int       @map("size_kb")
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")
    taskId    String    @map("task_id") @db.Uuid
    userId    String    @map("user_id") @db.Uuid
    task      Task      @relation(fields: [taskId], references: [id], map: "FK__TASK_ATTACHMENT__TASK")
    user      TaskUser  @relation(fields: [userId], references: [id], map: "FK__TASK_ATTACHMENT__USER")

    @@map("task_attachment")
}

model TaskComment {
    id        String    @id @default(uuid()) @db.Uuid
    text      String
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted Boolean   @default(false) @map("is_deleted")
    taskId    String    @map("task_id") @db.Uuid
    userId    String    @map("user_id") @db.Uuid
    task      Task      @relation(fields: [taskId], references: [id], map: "FK__TASK_COMMENT__TASK")
    user      TaskUser  @relation(fields: [userId], references: [id], map: "FK__TASK_COMMENT__USER")

    @@map("task_comment")
}

model TaskChange {
    id           String    @id @default(uuid()) @db.Uuid
    propertyName String    @map("property_name") @db.VarChar(64)
    valueNew     String    @map("value_new")
    valueOld     String?   @map("value_old")
    createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt    DateTime? @map("deleted_at") @db.Timestamp(6)
    isDeleted    Boolean   @default(false) @map("is_deleted")
    taskId       String    @map("task_id") @db.Uuid
    userId       String    @map("user_id") @db.Uuid
    task         Task      @relation(fields: [taskId], references: [id], map: "FK__TASK_CHANGE__TASK")
    user         TaskUser  @relation(fields: [userId], references: [id], map: "FK__TASK_CHANGE__USER")

    @@map("task_change")
}

model TaskRelation {
    taskMainId         String           @map("task_main_id") @db.Uuid
    taskForeignId      String           @map("task_foreign_id") @db.Uuid
    createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt          DateTime         @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt          DateTime?        @map("deleted_at") @db.Timestamp(6)
    isDeleted          Boolean          @default(false) @map("is_deleted")
    taskRelationTypeId String           @map("task_relation_type_id") @db.Uuid
    taskRelationType   TaskRelationType @relation(fields: [taskRelationTypeId], references: [id], map: "FK__TASK_RELATION__TASK_RELATION_TYPE")
    taskForeign        Task             @relation("FK__TASK_RELATION__TASK_FOREIGN", fields: [taskForeignId], references: [id])
    taskMain           Task             @relation("FK__TASK_RELATION__TASK_MAIN", fields: [taskMainId], references: [id])

    @@id([taskMainId, taskForeignId], map: "PK__TASK_RELATION")
    @@map("task_relation")
}

model TaskRelationType {
    id               String         @id @default(uuid()) @db.Uuid
    code             String         @unique @db.VarChar(36)
    name_main        String         @db.VarChar(64)
    name_foreign     String         @db.VarChar(64)
    position         Int            @db.SmallInt
    description      String?
    createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt        DateTime       @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt        DateTime?      @map("deleted_at") @db.Timestamp(6)
    isDeleted        Boolean        @default(false) @map("is_deleted")
    projectId        String         @map("project_id") @db.Uuid
    tasksConnections TaskRelation[]
    project          TaskProject    @relation(fields: [projectId], references: [id], map: "FK__TASK_RELATION_TYPE__PROJECT")

    @@unique([position, isDeleted])
    @@map("task_relation_type")
}

model TaskCustomField {
    id                    String              @id @default(uuid()) @db.Uuid
    value                 String?
    createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt             DateTime            @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt             DateTime?           @map("deleted_at") @db.Timestamp(6)
    isDeleted             Boolean             @default(false) @map("is_deleted")
    taskCustomFieldTypeId String              @map("task_custom_field_type_id") @db.Uuid
    taskTypeId            String              @map("task_type_id") @db.Uuid
    taskCustomFieldType   TaskCustomFieldType @relation(fields: [taskCustomFieldTypeId], references: [id], map: "FK__TASK_CUSTOM_FIELD__TASK_CUSTOM_FIELD_TYPE")
    taskType              TaskType            @relation(fields: [taskTypeId], references: [id], map: "FK__TASK_CUSTOM_FIELD__TASK_TYPE")

    @@map("task_custom_field")
}

model TaskCustomFieldType {
    id                String                   @id @default(uuid()) @db.Uuid
    code              String                   @unique @db.VarChar(36)
    name              String                   @db.VarChar(64)
    position          Int                      @db.SmallInt
    isEditable        Boolean?                 @map("is_editable")
    isRequired        Boolean?                 @map("is_required")
    isSearchable      Boolean?                 @map("is_searchable")
    isFilterable      Boolean?                 @map("is_filterable")
    possibleValues    String?                  @map("possible_values")
    defaultValue      String?                  @map("default_value")
    regexp            String?
    createdAt         DateTime                 @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt         DateTime                 @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt         DateTime?                @map("deleted_at") @db.Timestamp(6)
    isDeleted         Boolean                  @default(false) @map("is_deleted")
    valueTypeId       String                   @map("value_type_id") @db.Uuid
    projectId         String                   @map("project_id") @db.Uuid
    tasksCustomFields TaskCustomField[]
    project           TaskProject              @relation(fields: [projectId], references: [id], map: "FK__TASK_CUSTOM_FIELD_TYPE__PROJECT")
    valueType         TaskCustomFieldValueType @relation(fields: [valueTypeId], references: [id], map: "FK__TASK_CUSTOM_FIELD_TYPE__VALUE_TYPE")

    @@unique([position, isDeleted])
    @@map("task_custom_field_type")
}

model TaskCustomFieldValueType {
    id                     String                @id @default(uuid()) @db.Uuid
    code                   String                @unique @db.VarChar(36)
    name                   String                @db.VarChar(64)
    createdAt              DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt              DateTime              @default(now()) @map("updated_at") @db.Timestamp(6)
    deletedAt              DateTime?             @map("deleted_at") @db.Timestamp(6)
    isDeleted              Boolean               @default(false) @map("is_deleted")
    tasksCustomFieldsTypes TaskCustomFieldType[]

    @@map("task_custom_field_value_type")
}

enum AuthUserStatusEnum {
    WAITING_COMPLETE
    ACTIVE
    BLOCKED

    @@map("auth_user_status_enum")
}

enum NotificationTypeEnum {
    EMAIL
    WEB
    TELEGRAM

    @@map("notification_type_enum")
}
