generator client {
  provider      = "prisma-client-js"
  output        = "../../../../node_modules/generatedprisma"
  binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  id           String  @id @default(uuid())
  email        String  @unique
  firstname    String
  lastname     String
  password     String?
  completeCode String?

  role   AuthRole @relation(fields: [roleId], references: [id])
  roleId String

  status    AuthUserStatusEnum @default(WAITING_COMPLETE)
  createdAt DateTime           @default(now())
  deletedAt DateTime?
  tokens    AuthRefreshToken[]
}

model AuthRefreshToken {
  id        String   @id @default(uuid())
  isRevoked Boolean  @default(false)
  expiresAt DateTime
  user      AuthUser @relation(fields: [userId], references: [id])
  userId    String
}

model AuthRole {
  id          String               @id @default(uuid())
  name        String               @unique
  superuser   Boolean
  editable    Boolean
  user        AuthUser[]
  permissions AuthRolePermission[]
}

model AuthRolePermission {
  role     AuthRole   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId   String
  method   AuthMethod @relation(fields: [methodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  methodId String
  allowed  Boolean
  editable Boolean    @default(true)

  @@id([roleId, methodId])
}

model AuthMethod {
  id          String @id @default(uuid())
  name        String @unique
  description String
  group       String

  permissions AuthRolePermission[]
}

enum AuthUserStatusEnum {
  WAITING_COMPLETE
  ACTIVE
  BLOCKED
}

model AuthSettings {
  id                      Int     @id
  defaultRolesInitialized Boolean @default(false)
}

model SystemSettings {
  id String @id @default(uuid())
}

model NotificationPreferences {
  id              String         @id @default(uuid())
  externalUserId  String         @unique
  emailEnabled    Boolean
  email           String?
  webEnabled      Boolean
  telegramEnabled Boolean
  telegramAccount Int?
  nofications     Notification[]
}

model Notification {
  id            String                   @id @default(uuid())
  topic         String
  message       String
  link          String?
  type          NotificationTypeEnum
  sent          Boolean                  @default(false)
  sentAt        DateTime?
  error         String?
  Preferences   NotificationPreferences? @relation(fields: [preferencesId], references: [id])
  preferencesId String?
}

enum NotificationTypeEnum {
  EMAIL
  WEB
  TELEGRAM
}

model File {
  id           String               @id @default(uuid())
  originalName String
  mimeType     String
  size         Int
  eTag         String
  bucket       String
  key          String
  location     String
  user         AuthUser             @relation(fields: [userId], references: [id])
  userId       String
}
