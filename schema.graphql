type PaginatedMetaType {
  curPage: Float!
  perPage: Float!
  total: Float!
}

type CursorBasedMetaType {
  cursor: String!
  take: Float!
}

type ProjectIntegrationTasksRelationObject {
  id: String!
  code: String!
  nameMain: String!
  nameForeign: String!
  position: Float!
  description: String
}

type ProjectIntegrationTasksStatusObject {
  id: String!
  code: String!
  name: String!
  position: Float!
  isDefault: Boolean!
  description: String
}

type ProjectIntegrationTasksTagObject {
  id: String!
  code: String!
  name: String!
  position: Float!
  description: String
}

type ProjectIntegrationUsersRoleObject {
  id: String!
  code: String!
  name: String!
  position: Float!
  description: String
}

type ProjectIntegrationUserObject {
  id: String!
  firstname: String!
  lastname: String!
}

type ProjectIntegrationProjectUsersOutput {
  data: [ProjectIntegrationUserObject!]!
  meta: PaginatedMetaType!
}

type ProjectIntegrationProjectObject {
  id: String!
  name: String!
  description: String
  deadline: Float
  budget: Float
  version: Float!
  createdAt: Float!
}

type ProjectIntegrationProjectsOutput {
  data: [ProjectIntegrationProjectObject!]!
  meta: PaginatedMetaType!
}

type ProjectIntegrationProjectsOfCurrentUserOutput {
  data: [ProjectIntegrationProjectObject!]!
  meta: PaginatedMetaType!
}

type TaskIntegrationUserObject {
  id: String!
  firstname: String!
  lastname: String!
}

type TaskIntegrationTaskObject {
  id: String!
  name: String!
  number: Float!
  description: String
  estimatedDateStart: Float
  estimatedDateEnd: Float
  estimatedDuration: Float
  version: Float!
  createdAt: Float!
  status: String!
  createdBy: TaskIntegrationUserObject!
  assignedTo: TaskIntegrationUserObject
}

type TaskIntegrationTasksOutput {
  data: [TaskIntegrationTaskObject!]!
  meta: PaginatedMetaType!
}

type TaskIntegrationTasksOfCurrentUserOutput {
  data: [TaskIntegrationTaskObject!]!
  meta: PaginatedMetaType!
}

type MethodsType {
  id: ID!
  name: String!
  group: String!
  editable: Boolean!
  description: String!
  allowed: Boolean!
}

type RoleType {
  id: ID!
  name: String!
  editable: Boolean!
  superuser: Boolean!
  methods: [MethodsType!]!
}

type PaginatedRoles {
  data: [RoleType!]!
  meta: PaginatedMetaType!
}

type UserType {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  status: AuthUserStatusEnum!
  createdAt: DateTime!
  deletedAt: DateTime
}

enum AuthUserStatusEnum {
  WAITING_COMPLETE
  ACTIVE
  BLOCKED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedUsers {
  data: [UserType!]!
  meta: PaginatedMetaType!
}

type AuthorizationResponse {
  refreshToken: String!
  accessToken: String!
  userId: ID!
  expiresAt: Float!
}

type GetNotificationData {
  id: String!
  topic: String!
  message: String!
  link: String!
  type: NotificationTypeEnum!
  sent: Boolean!
  sentAt: DateTime!
  seen: Boolean!
}

enum NotificationTypeEnum {
  EMAIL
  WEB
  TELEGRAM
}

type GetNotificationsResponse {
  data: [GetNotificationData!]!
  meta: CursorBasedMetaType!
}

type GetNotificationPreferences {
  emailEnabled: Boolean!
  email: String
  webEnabled: Boolean!
  telegramEnabled: Boolean!
  telegramAccount: Float
}

type OnNewNotification {
  userId: String!
  topic: String!
  message: String!
  link: String
}

type Query {
  getUsers(input: GetUsersInput!): PaginatedUsers!
  getRoles(input: GetRolesInput!): PaginatedRoles!
  getMyRole: RoleType!
  getUser(input: GetUserInput!): UserType!
  getMyNotificationPreferences: GetNotificationPreferences!
  getMyNotifications(
    input: GetNotificationsInput!
  ): [GetNotificationsResponse!]!
  projects: ProjectIntegrationProjectsOutput!
  myProjects: ProjectIntegrationProjectsOfCurrentUserOutput!
  projectUsers(
    input: ProjectIntegrationProjectUsersInput!
  ): ProjectIntegrationProjectUsersOutput!
  projectUsersRoles(
    input: ProjectIntegrationProjectUsersRolesInput!
  ): [ProjectIntegrationUsersRoleObject!]!
  projectTasksTags(
    input: ProjectIntegrationProjectTasksTagsInput!
  ): [ProjectIntegrationTasksTagObject!]!
  projectTasksStatuses(
    input: ProjectIntegrationProjectTasksStatusesInput!
  ): [ProjectIntegrationTasksStatusObject!]!
  projectTasksRelations(
    input: ProjectIntegrationProjectTasksRelationsInput!
  ): [ProjectIntegrationTasksRelationObject!]!
  tasks(input: TaskIntegrationTasksInput): TaskIntegrationTasksOutput!
  myTasks(
    input: TaskIntegrationTasksOfCurrentUserInput
  ): TaskIntegrationTasksOfCurrentUserOutput!
  getFile(input: GetFileInput!): String!
}

input GetUsersInput {
  curPage: Float
  perPage: Float
  orderBy: OrderByInput
  filter: GetUsersFilterInput
}

input OrderByInput {
  field: String!
  order: OrderEnum!
}

enum OrderEnum {
  ASC
  DESC
}

input GetUsersFilterInput {
  email: String
  firstname: String
  lastname: String
  role: String
  status: AuthUserStatusEnum
}

input GetRolesInput {
  curPage: Float
  perPage: Float
  filter: GetRolesFilterInput
}

input GetRolesFilterInput {
  name: String
}

input GetUserInput {
  userId: ID!
}

input GetNotificationsInput {
  userId: String
  cursor: String
  take: Float
  type: NotificationTypeEnum!
  seen: Boolean
}

input ProjectIntegrationProjectUsersInput {
  projectId: String!
  filterByName: String
  orderBy: OrderByInput
}

input ProjectIntegrationProjectUsersRolesInput {
  projectId: String!
}

input ProjectIntegrationProjectTasksTagsInput {
  projectId: String!
}

input ProjectIntegrationProjectTasksStatusesInput {
  projectId: String!
}

input ProjectIntegrationProjectTasksRelationsInput {
  projectId: String!
}

input TaskIntegrationTasksInput {
  curPage: Float
  perPage: Float
}

input TaskIntegrationTasksOfCurrentUserInput {
  curPage: Float
  perPage: Float
}

input GetFileInput {
  id: String!
}

type Mutation {
  updateRole(input: UpdateRoleInput!): Boolean!
  changeUserRole(input: ChangeUserRoleInput!): Boolean!
  createRole(input: CreateRoleInput!): Boolean!
  deleteRole(input: DeleteRoleInput!): Boolean!
  changePermissions(input: ChangePermissionsInput!): Boolean!
  updateUser(input: UpdateUserInput!): Boolean!
  signIn(input: SignInInput!): AuthorizationResponse!
  refreshToken(input: RefreshTokenInput!): AuthorizationResponse!
  createUser(input: CreateUserInput!): UserType!
  deleteUser(input: DeleteUserInput!): Boolean!
  completeSignIn(input: CompleteSignInInput!): AuthorizationResponse!
  changeMyNotificationPreferences(
    input: ChangeMyNotificationPreferences!
  ): Boolean!
  markAsSeen(input: MarkAsSeenInput!): Boolean!
  markAllAsSeen(input: MarkAllAsSeenInput!): Boolean!
  createProject(input: ProjectIntegrationCreateProjectInput!): String!
  updateProject(input: ProjectIntegrationProjectUpdateInput!): String!
  createTask(input: TaskIntegrationTaskCreateInput!): String!
  updateTask(input: TaskIntegrationTaskUpdateInput!): String!
  uploadFile(input: UploadFileInput!): String!
}

input UpdateRoleInput {
  roleId: ID!
  name: String
  superuser: Boolean
  editable: Boolean
}

input ChangeUserRoleInput {
  userId: ID!
  roleName: String!
}

input CreateRoleInput {
  name: String!
}

input DeleteRoleInput {
  roleId: ID!
}

input ChangePermissionsInput {
  roleId: ID!
  permissions: [PermissionInput!]!
}

input PermissionInput {
  methodId: ID!
  allow: Boolean!
}

input UpdateUserInput {
  userId: ID!
  email: String
  firstname: String
  lastname: String
  password: String
  role: String
  status: AuthUserStatusEnum
}

input SignInInput {
  email: String!
  password: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  roleName: String!
}

input DeleteUserInput {
  userId: ID!
}

input CompleteSignInInput {
  userId: ID!
  code: String!
  password: String!
}

input ChangeMyNotificationPreferences {
  emailEnabled: Boolean
  email: String
  webEnabled: Boolean
  telegramEnabled: Boolean
  telegramAccount: Float
}

input MarkAsSeenInput {
  notificationId: String!
}

input MarkAllAsSeenInput {
  type: NotificationTypeEnum!
}

input ProjectIntegrationCreateProjectInput {
  name: String!

  """
  Budget of the project in hours
  """
  budget: Float!

  """
  Deadline of the project in timestampMs
  """
  deadline: Float!
  description: String!
  members: [ProjectIntegrationCreateProjectMemberInput!]
}

input ProjectIntegrationCreateProjectMemberInput {
  userId: String!
  roleCode: String!
}

input ProjectIntegrationProjectUpdateInput {
  id: String!
  version: Float!
  name: String
  description: String
  budget: Float
  deadline: Float
}

input TaskIntegrationTaskCreateInput {
  projectId: String!
  name: String!
  statusId: String!
  description: String
  estimatedDateStart: Float
  estimatedDateEnd: Float
  estimatedDuration: Float
  assignedToId: String
  parentId: String
  tagsIds: [String!]
}

input TaskIntegrationTaskUpdateInput {
  id: String!
  version: Float!
  name: String
  description: String
  estimatedDateEnd: Float
  estimatedDateStart: Float
  estimatedDuration: Float
  parentId: String
  statusId: String
  assignedToId: String
  taskTagIds: [String!]
}

input UploadFileInput {
  file: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type Subscription {
  onNewNotification: OnNewNotification!
}
